{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    getRandomCell() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const [randomRow, randomCol] = emptyCells[randomIndex];\n            this.state[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkStatus() {\n        let hasEmptyCells = false;\n        let canMove = false;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const cellValue = this.state[row][col];\n            if (cellValue === 2048) {\n                if (this.status !== $a5fd07fa01589658$var$Game.gameStatus.win) this.status = $a5fd07fa01589658$var$Game.gameStatus.win;\n            }\n            if (cellValue === 0) hasEmptyCells = true;\n            if (row < 3 && cellValue === this.state[row + 1][col] || col < 3 && cellValue === this.state[row][col + 1]) canMove = true;\n        }\n        if (!hasEmptyCells && !canMove) this.status = $a5fd07fa01589658$var$Game.gameStatus.lose;\n    }\n    moveLeft() {\n        const previousState = this.state.map((row)=>row.slice());\n        for(let row = 0; row < 4; row++){\n            const newRow = this.state[row].filter((val)=>val !== 0);\n            const mergedRow = [];\n            for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                mergedRow.push(newRow[i] * 2);\n                this.score += newRow[i] * 2;\n                i++;\n            } else mergedRow.push(newRow[i]);\n            this.state[row] = mergedRow.concat(Array(4 - mergedRow.length).fill(0));\n        }\n        this.checkForChanges(previousState);\n        this.checkStatus();\n    }\n    moveRight() {\n        const previousState = this.state.map((row)=>row.slice());\n        for(let row = 0; row < 4; row++){\n            const newRow = this.state[row].filter((val)=>val !== 0).reverse();\n            const mergedRow = [];\n            for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                mergedRow.push(newRow[i] * 2);\n                this.score += newRow[i] * 2;\n                i++;\n            } else mergedRow.push(newRow[i]);\n            this.state[row] = Array(4 - mergedRow.length).fill(0).concat(mergedRow.reverse());\n        }\n        this.checkForChanges(previousState);\n        this.checkStatus();\n    }\n    moveUp() {\n        this.state = this.transpose(this.state);\n        this.moveLeft();\n        this.state = this.transpose(this.state);\n    }\n    moveDown() {\n        this.state = this.transpose(this.state);\n        this.moveRight();\n        this.state = this.transpose(this.state);\n    }\n    transpose(state) {\n        const result = [];\n        for(let col = 0; col < 4; col++){\n            result[col] = [];\n            for(let row = 0; row < 4; row++)result[col].push(state[row][col]);\n        }\n        return result;\n    }\n    checkForChanges(previousState) {\n        if (this.state.toString() !== previousState.toString()) {\n            this.getRandomCell();\n            this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        this.getRandomCell();\n    }\n    restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$setScore();\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    const moves = {\n        ArrowRight: $09e991522ca7e64e$var$game.moveRight,\n        ArrowLeft: $09e991522ca7e64e$var$game.moveLeft,\n        ArrowUp: $09e991522ca7e64e$var$game.moveUp,\n        ArrowDown: $09e991522ca7e64e$var$game.moveDown\n    };\n    if (moves[e.key]) moves[e.key].call($09e991522ca7e64e$var$game);\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$setScore();\n    $09e991522ca7e64e$var$setMessage();\n});\nfunction $09e991522ca7e64e$var$updateGameField() {\n    $09e991522ca7e64e$var$gameField.innerHTML = \"\";\n    const currentState = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < 4; row++){\n        const tr = document.createElement(\"tr\");\n        for(let col = 0; col < 4; col++){\n            const td = document.createElement(\"td\");\n            const value = currentState[row][col];\n            td.textContent = value !== 0 ? value : \"\";\n            td.classList.add(\"field-cell\");\n            if (value !== 0) td.classList.add(`field-cell--${value}`);\n            tr.appendChild(td);\n        }\n        $09e991522ca7e64e$var$gameField.appendChild(tr);\n    }\n}\nfunction $09e991522ca7e64e$var$setScore() {\n    if ($09e991522ca7e64e$var$gameScore) $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$setMessage() {\n    const currStatus = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$messageWin.classList.toggle(\"hidden\", currStatus !== $a5fd07fa01589658$exports.gameStatus.win);\n    $09e991522ca7e64e$var$messageLose.classList.toggle(\"hidden\", currStatus !== $a5fd07fa01589658$exports.gameStatus.lose);\n}\n$09e991522ca7e64e$var$updateGameField();\n$09e991522ca7e64e$var$setMessage();\n$09e991522ca7e64e$var$setScore();\n\n\n//# sourceMappingURL=index.3994a63d.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  updateGameField();\n  setScore();\n});\n\ndocument.addEventListener('keyup', (e) => {\n  const moves = {\n    ArrowRight: game.moveRight,\n    ArrowLeft: game.moveLeft,\n    ArrowUp: game.moveUp,\n    ArrowDown: game.moveDown,\n  };\n\n  if (moves[e.key]) {\n    moves[e.key].call(game);\n  }\n\n  updateGameField();\n  setScore();\n  setMessage();\n});\n\nfunction updateGameField() {\n  gameField.innerHTML = '';\n\n  const currentState = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    const tr = document.createElement('tr');\n\n    for (let col = 0; col < 4; col++) {\n      const td = document.createElement('td');\n      const value = currentState[row][col];\n\n      td.textContent = value !== 0 ? value : '';\n      td.classList.add('field-cell');\n\n      if (value !== 0) {\n        td.classList.add(`field-cell--${value}`);\n      }\n\n      tr.appendChild(td);\n    }\n\n    gameField.appendChild(tr);\n  }\n}\n\nfunction setScore() {\n  if (gameScore) {\n    gameScore.textContent = game.getScore();\n  }\n}\n\nfunction setMessage() {\n  const currStatus = game.getStatus();\n\n  messageWin.classList.toggle('hidden', currStatus !== Game.gameStatus.win);\n  messageLose.classList.toggle('hidden', currStatus !== Game.gameStatus.lose);\n}\n\nupdateGameField();\nsetMessage();\nsetScore();\n","'use strict';\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.score = 0;\n    this.status = Game.gameStatus.idle;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  getRandomCell() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const [randomRow, randomCol] = emptyCells[randomIndex];\n\n      this.state[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkStatus() {\n    let hasEmptyCells = false;\n    let canMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const cellValue = this.state[row][col];\n\n        if (cellValue === 2048) {\n          if (this.status !== Game.gameStatus.win) {\n            this.status = Game.gameStatus.win;\n          }\n        }\n\n        if (cellValue === 0) {\n          hasEmptyCells = true;\n        }\n\n        if (\n          (row < 3 && cellValue === this.state[row + 1][col]) ||\n          (col < 3 && cellValue === this.state[row][col + 1])\n        ) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (!hasEmptyCells && !canMove) {\n      this.status = Game.gameStatus.lose;\n    }\n  }\n\n  moveLeft() {\n    const previousState = this.state.map((row) => row.slice());\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.state[row].filter((val) => val !== 0);\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.score += newRow[i] * 2;\n          i++;\n        } else {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      this.state[row] = mergedRow.concat(Array(4 - mergedRow.length).fill(0));\n    }\n\n    this.checkForChanges(previousState);\n    this.checkStatus();\n  }\n\n  moveRight() {\n    const previousState = this.state.map((row) => row.slice());\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.state[row].filter((val) => val !== 0).reverse();\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.score += newRow[i] * 2;\n          i++;\n        } else {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      this.state[row] = Array(4 - mergedRow.length)\n        .fill(0)\n        .concat(mergedRow.reverse());\n    }\n\n    this.checkForChanges(previousState);\n    this.checkStatus();\n  }\n\n  moveUp() {\n    this.state = this.transpose(this.state);\n    this.moveLeft();\n    this.state = this.transpose(this.state);\n  }\n\n  moveDown() {\n    this.state = this.transpose(this.state);\n    this.moveRight();\n    this.state = this.transpose(this.state);\n  }\n\n  transpose(state) {\n    const result = [];\n\n    for (let col = 0; col < 4; col++) {\n      result[col] = [];\n\n      for (let row = 0; row < 4; row++) {\n        result[col].push(state[row][col]);\n      }\n    }\n\n    return result;\n  }\n\n  checkForChanges(previousState) {\n    if (this.state.toString() !== previousState.toString()) {\n      this.getRandomCell();\n      this.status = Game.gameStatus.playing;\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatus.playing;\n    this.getRandomCell();\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.gameStatus.idle;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","constructor","initialState","score","status","state","map","row","getRandomCell","emptyCells","col","push","length","randomIndex","Math","floor","random","randomRow","randomCol","checkStatus","hasEmptyCells","canMove","cellValue","moveLeft","previousState","slice","newRow","filter","val","mergedRow","i","concat","Array","fill","checkForChanges","moveRight","reverse","moveUp","transpose","moveDown","result","toString","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$updateGameField","innerHTML","currentState","tr","createElement","td","value","textContent","classList","add","appendChild","$09e991522ca7e64e$var$setScore","$09e991522ca7e64e$var$setMessage","currStatus","toggle","addEventListener","contains","remove","e","moves","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","key","call"],"version":3,"file":"index.3994a63d.js.map"}